par(mfrow=c(2,1),mar=c(0.5,4.5,3,3))
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","ODE regularized","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"red"),pch=c(4,NA,NA),lty=c(NA,2,1),lwd=c(NA,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
par(mfrow=c(2,1),mar=c(0.5,4.5,3,5))
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","ODE regularization","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"red"),pch=c(4,NA,NA),lty=c(NA,2,1),lwd=c(NA,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
par(mfrow=c(2,1),mar=c(0.5,4.5,3,5))
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","ODE regularization","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"red"),pch=c(4,NA,NA),lty=c(NA,2,1),lwd=c(NA,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(odem$t,rkgres_mlp$intp[i,],col=c("blue","green")[i],lwd=2,lty=2) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","MLP kernel","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"red"),pch=c(4,NA,NA),lty=c(NA,2,1),lwd=c(NA,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
par(mfrow=c(2,1),mar=c(0.5,4.5,3,3),oma = c(3,0.5,0,0) + 0.1)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(odem$t,rkgres_mlp$intp[i,],col=c("blue","green")[i],lwd=2,lty=2) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","MLP kernel","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"red"),pch=c(4,NA,NA),lty=c(NA,2,1),lwd=c(NA,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
par(mfrow=c(2,1),mar=c(0.5,4.5,3,3),oma = c(3,0.5,0,0) + 0.1)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","ODE regularization","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"red"),pch=c(4,NA,NA),lty=c(NA,2,1),lwd=c(NA,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","RKG3","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"purple","red"),pch=c(4,NA,NA,NA),lty=c(NA,2,3,1),lwd=c(NA,2,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
par(mfrow=c(2,1),mar=c(0.5,4.5,3,3),oma = c(3,0.5,0,0) + 0.1)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","ODE regularized","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"purple","red"),pch=c(4,NA,NA,NA),lty=c(NA,2,3,1),lwd=c(NA,2,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
par(mfrow=c(2,1),mar=c(0.5,4.5,3,3),oma = c(3,0.5,0,0) + 0.1)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topright",legend=c("Observation","RBF kernel","ODE regularized","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"purple","red"),pch=c(4,NA,NA,NA),lty=c(NA,2,3,1),lwd=c(NA,2,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend(c(23,10),legend=c("Observation","RBF kernel","ODE regularized","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"purple","red"),pch=c(4,NA,NA,NA),lty=c(NA,2,3,1),lwd=c(NA,2,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
par(mfrow=c(2,1),mar=c(0.5,4.5,3,3),oma = c(3,0.5,0,0) + 0.1)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend(c(4,4),legend=c("Observation","RBF kernel","ODE regularized","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"purple","red"),pch=c(4,NA,NA,NA),lty=c(NA,2,3,1),lwd=c(NA,2,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
title(outer=T,xlab="Time",line=2,cex.lab=1.5)
for(i in 1:2){
plot(odem$t,y_true[,i],type="n",xlab="Time",ylab=paste("State",i),cex.lab=1.5)
points(odem$t,y_no[,i],col="black",pch=4)      #observations
lines(seq(0,100,by=0.01),rkgres$bbb[[i]]$predictT(seq(0,100,by=0.01))$pred,col=c('blue',"green")[i],lwd=2,lty=2)
lines(seq(0,100,by=0.01),res$rk3$rk[[i]]$predictT(seq(0,100,by=0.01))$pred,col="purple",lwd=3,lty=3) #Interpolated smooth line using kernel method
lines(odem$t,y_true[,i],col="red")     #True
legend("topleft",legend=c("Observation","RBF kernel","ODE regularized","True"),inset = c(0.06,0),bty = "n",col=c("black",c("blue","green")[i],"purple","red"),pch=c(4,NA,NA,NA),lty=c(NA,2,3,1),lwd=c(NA,2,2,2),cex=1.2,pt.cex = 1,text.width = 2,seg.len=1.5)
}
?bootstrap
ncores=detectCores(logical = F)
cl=makeCluster(ncores)
junk <- clusterEvalQ(cl,
{library(mvtnorm)
library(KGode)}) ## Discard result
seed.list=as.list(.Random.seed[1])
clusterExport(cl=cl, varlist=c("y_true", "noise", "n_o", "LV_fun","kkk0"))
par.list.rkg3=parLapply(cl,X=seed.list,fun =function(x){
set.seed(x)
init_par=rep(1,4)
#different seed gets different y_no
y_no = y_true + rmvnorm(n_o,c(0,0),noise*diag(2))
init_yode=t(y_no)
odem= ode$new(sample=1,fun=LV_fun,grfun=NULL,t=kkk0$t,ode_par=init_par,y_ode = init_yode)
rkgres=rkg(odem,y_no,ktype="rbf")
lam = c(10,1,0.1,0.01)
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
return(res$oppar)})
?third
par.list.rkg3=parLapply(cl,X=seed.list,fun =function(x){
set.seed(x)
init_par=rep(1,4)
#different seed gets different y_no
y_no = y_true + rmvnorm(n_o,c(0,0),noise*diag(2))
init_yode=t(y_no)
odem= ode$new(sample=1,fun=LV_fun,grfun=NULL,t=kkk0$t,ode_par=init_par,y_ode = init_yode)
rkgres=rkg(odem,y_no,ktype="rbf")
lam = c(10,1,0.1,0.01)
lambdalist = crossv(lam,odem,rkgres$bbb,crtype="i",y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
return(res$oppar)})
par.list.rkg3=parLapply(cl,X=seed.list,fun =function(x){
set.seed(x)
init_par=rep(1,4)
#different seed gets different y_no
y_no = y_true + rmvnorm(n_o,c(0,0),noise*diag(2))
init_yode=t(y_no)
odem= ode$new(sample=1,fun=LV_fun,grfun=NULL,t=kkk0$t,ode_par=init_par,y_ode = init_yode)
rkgres=rkg(odem,y_no,ktype="rbf")
lam = c(10,1,0.1,0.01)
crtype="i"
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
return(res$oppar)})
par.list.rkg3=parLapply(cl,X=seed.list,fun =function(x){
set.seed(x)
init_par=rep(1,4)
#different seed gets different y_no
y_no = y_true + rmvnorm(n_o,c(0,0),noise*diag(2))
init_yode=t(y_no)
odem= ode$new(sample=1,fun=LV_fun,grfun=NULL,t=kkk0$t,ode_par=init_par,y_ode = init_yode)
rkgres=rkg(odem,y_no,ktype="rbf")
lam = c(10,1,0.1,0.01)
crtype="i"
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
return(res$oppar)})
par.list.rkg3
start.time=proc.time()
ncores=detectCores(logical = F)
cl=makeCluster(ncores)
junk <- clusterEvalQ(cl,
{library(mvtnorm)
library(KGode)}) ## Discard result
seed.list=as.list(.Random.seed[1:100])
clusterExport(cl=cl, varlist=c("y_true", "noise", "n_o", "LV_fun","kkk0"))
par.list.rkg3=parLapply(cl,X=seed.list,fun =function(x){
set.seed(x)
init_par=rep(1,4)
#different seed gets different y_no
y_no = y_true + rmvnorm(n_o,c(0,0),noise*diag(2))
init_yode=t(y_no)
odem= ode$new(sample=1,fun=LV_fun,grfun=NULL,t=kkk0$t,ode_par=init_par,y_ode = init_yode)
rkgres=rkg(odem,y_no,ktype="rbf")
lam = c(10,1,0.1,0.01)
crtype="i"
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
return(res$oppar)})
#bell
stopCluster(cl)
stop.time=proc.time()
start.time-stop.time
par.variation.rkg3 =do.call(par.list.rkg3,rbind)
par.variation.rkg3 =do.call(rbind,par.list.rkg3)
View(par.list)
par.variation.rkg3%>%
as.data.frame()%>%
rename(alpha=V1,beta=V2,gamma=V3,delta=V4)%>%
gather(key="parameters",value = "estimates")->par.variation.rkg3
par.variation.rkg3$Kernel="ODE regularized"
par.variation$Kernel="RBF"
pooled_rkg3=rbind(par.variation,par.variation.rkg3)
View(par.variation.rkg3)
View(par.variation.rkg3)
par.variation$Kernel="RBF"
pooled_rkg3=rbind(par.variation,par.variation.rkg3)
View(par.variation)
View(par.list.mlp)
View(par.variation.rkg3)
View(par.variation.mlp)
View(par.variation.rkg3)
View(par.variation.rkg3)
View(par.variation.mlp)
View(par.variation.mlp)
par.variation.rkg3$true=par.variation$true
pooled_rkg3=rbind(par.variation,par.variation.rkg3)
pooled_rkg3%>%
ggplot(aes(x=parameters,y=estimates))+
geom_dotplot(binaxis = "y", stackdir='center',binwidth = 0.012)+
geom_point(aes(x=parameters,y=true),color="red",size=4)+
facet_wrap(~Kernel)+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold"),
strip.text = element_text(size=14))
load("G:/OneDrive - University of Glasgow/Project/code/Biopathway.RData")
pooled%>%
filter(!parameters%in%c("k5","k6"))%>%
ggplot(aes(x=parameters,y=estimates))+
geom_dotplot(binaxis = "y", stackdir='center',binwidth = 0.012,stackratio = 0.5,size=3)+
ylim(c(0,1))+
geom_point(aes(x=parameters,y=true),color="red",size=3)+
facet_wrap(~Kernel)+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=17,face="bold"),
strip.text = element_text(size=14))
load("G:/OneDrive - University of Glasgow/Project/code/Biopathway.RData")
pooled%>%
filter(!parameters%in%c("k5","k6"))%>%
ggplot(aes(x=parameters,y=estimates))+
geom_dotplot(binaxis = "y", stackdir='center',binwidth = 0.012,stackratio = 0.5,size=3)+
ylim(c(0,1))+
geom_point(aes(x=parameters,y=true),color="red",size=3)+
facet_wrap(~Kernel)+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=17,face="bold"),
strip.text = element_text(size=14))
BP.rbf.variation=do.call(rbind,par.list.BP_rbf)%>%
as.data.frame()
BP.mlp.variation=do.call(rbind,par.list.BP_mlp)%>%
as.data.frame()
BP.rbf.variation$ratio=BP.rbf.variation$V5/BP.rbf.variation$V6
BP.mlp.variation$ratio=BP.mlp.variation$V5/BP.mlp.variation$V6
BP.mlp.variation%>%
rename(k1=V1,k2=V2,k3=V3,k4=V4,k5=V5,k6=V6)%>%
gather(key="parameters",value = "estimates")->BP.mlp.variation
BP.rbf.variation%>%
rename(k1=V1,k2=V2,k3=V3,k4=V4,k5=V5,k6=V6)%>%
gather(key="parameters",value = "estimates")->BP.rbf.variation
BP.rbf.variation$Kernel="RBF"
BP.mlp.variation$Kernel="MLP"
pooled=rbind(BP.rbf.variation,BP.mlp.variation)
pooled$true=rep(c(0.07,0.6,0.05,0.3,
0.017,0.3,0.017/0.3),each=100)
pooled%>%
filter(!parameters%in%c("k5","k6"))%>%
ggplot(aes(x=parameters,y=estimates))+
geom_dotplot(binaxis = "y", stackdir='center',binwidth = 0.012,stackratio = 0.5,size=3)+
ylim(c(0,1))+
geom_point(aes(x=parameters,y=true),color="red",size=3)+
facet_wrap(~Kernel)+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=17,face="bold"),
strip.text = element_text(size=14))
pooled=rbind(BP.rbf.variation,BP.mlp.variation)
pooled%>%
filter(!parameters%in%c("k5","k6"))%>%
ggplot(aes(x=parameters,y=estimates))+
geom_dotplot(binaxis = "y", stackdir='center',binwidth = 0.012,stackratio = 0.5,size=3)+
ylim(c(0,1))+
geom_point(aes(x=parameters,y=true),color="red",size=3)+
facet_wrap(~Kernel)+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=17,face="bold"),
strip.text = element_text(size=14))
View(pooled)
0.017/0.3
load("G:/OneDrive - University of Glasgow/Project/code/RBF_MLP.RData")
################
# THird bootstrap
################
res$rk3$rk[[i]]$predict()
load("G:/OneDrive - University of Glasgow/Project/code/RBF_MLP.RData")
############
# RKG3     #
############
crtype="i"
lam = c(10,1,0.1,0.01)
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
res$oppar
################
# THird bootstrap
################
res$rk3$rk[[i]]$predict()
################
# THird bootstrap
################
res$rk3$rk[[1]]$predict()
################
# THird bootstrap
################
res$rk3$rk[[2]]$predict()
################
# THird bootstrap
################
res$rk3$rk$predict()
View(y_no)
################
# THird bootstrap
################
y_rkg3=cbind(res$rk3$rk[[1]]$predict()$pred,res$rk3$rk[[2]]$predict()$pred)
View(y_rkg3)
lambdalist[[1]]
estimates_pooled=c()
rbind(estimates_pooled,1:3)
for(i in 1:21){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)}
mads_rkg3 = apply(estimates_pooled, 2, stats::mad)
mads_rkg3[-c(1,2)]
estimates_pooled
ncores=detectCores(logical = F)
cl=makeCluster(ncores)
junk <- clusterEvalQ(cl,
{library(mvtnorm)
library(KGode)}) ## Discard result
seed.list=as.list(.Random.seed[1:100])
clusterExport(cl=cl, varlist=c("y_no", "noise", "n_o", "LV_fun","kkk0","y_rkg3"))
for(i in 1:21){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)}
?parLapply
clusterApply(cl, 1:2, get("+"), 3)
estimates_pooled=c()
ncores=detectCores(logical = F)
cl=makeCluster(ncores)
junk <- clusterEvalQ(cl,
{library(mvtnorm)
library(KGode)}) ## Discard result
seed.list=as.list(.Random.seed[1:21])
clusterExport(cl=cl, varlist=c("y_no", "noise", "n_o", "LV_fun","kkk0","y_rkg3"))
parLapply(cl,X=1:21,fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
mads_rkg3 = apply(estimates_pooled, 2, stats::mad)
as.list(1:21)
parLapply(cl,X=as.list(1:21),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
odem$ode_par
clusterExport(cl=cl, varlist=c("y_no", "noise", "n_o", "odem","kkk0","y_rkg3"))
parLapply(cl,X=as.list(1:21),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
parLapply(cl,X=as.list(1:21),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
crtype="i"
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
clusterExport(cl=cl, varlist=c("estimated_pooled","y_no", "noise", "n_o", "odem","kkk0","y_rkg3"))
parLapply(cl,X=as.list(1:21),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
crtype="i"
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
clusterExport(cl=cl, varlist=c("estimates_pooled","y_no", "noise", "n_o", "odem","kkk0","y_rkg3"))
parLapply(cl,X=as.list(1:21),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,y_no,ktype="rbf")
crtype="i"
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
estimates_pooled=estimates_pooled[1:20,]
estimates_pooled
parLapply(cl,X=as.list(1:20),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,resampled_data,ktype="rbf")
crtype="i"
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)})
View(resampled_data)
estimates_pooled
parLapply(cl,X=as.list(1:20),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,resampled_data,ktype="rbf")
crtype="i"
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)
return(estimates_pooled)})
estimates_pooled
estimates_pooled=parLapply(cl,X=as.list(1:20),fun =function(x){
# compute residuals
residuals = y_no - y_rkg3
# sample with replacement
resampled_residuals = apply(residuals, 2, function(column) sample(column, length(column), replace=TRUE))
# add to interpolation
resampled_data = y_rkg3 + resampled_residuals
rkgres=rkg(odem,resampled_data,ktype="rbf")
crtype="i"
res=third(10,odem,bbb=rkgres$bbb,crtype)
estimates_pooled=rbind(estimates_pooled,res$oppar)
return(estimates_pooled)})
estimates_pooled
do.call(estimates_pooled,rbind)
do.call(,rbind,estimates_pooled)
do.call(rbind,estimates_pooled)
do.call(rbind,estimates_pooled)->estimates_pooled
mads_rkg3 = apply(estimates_pooled, 2, stats::mad)
mads_rkg3
save.image("G:/OneDrive - University of Glasgow/Project/code/RBF_MLP.RData")
apply(estimates_pooled, 2, mean)
start.time-stop.time
-start.time+stop.time
############
# RKG3     #
############
crtype="i"
lam = c(10,1,0.1,0.01)
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
if(!require(parallel))install.packages("parallel");library(parallel)
if(!require(mvtnorm))install.packages("mvtnorm");library(mvtnorm)
if(!require(KGode))install.packages("KGode");library(KGode)
library(tidyverse)
start_rkg3=proc.time()
crtype="i"
lam = c(10,1,0.1,0.01)
lambdalist = crossv(lam,odem,rkgres$bbb,crtype,y_no)
res=third(lambdalist[[1]],odem,bbb=rkgres$bbb,crtype)
stop_rkg3=proc.time()
stop_rkg3-start_rkg3
start.rkg=proc.time()
rkgres=rkg(odem,y_no,ktype="rbf")
stop.rkg=proc.time()
stop.rkg-start.rkg
